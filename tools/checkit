#!/usr/bin/env luvit

--[[
Copyright (c) 2012 Vladimir Dronnikov <dronnikov@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
]]--

local Utils = require('utils')
local Table = require('table')
local Debug = require('debug')
local UV = require('uv_native')
local Path = require('path')

local A = { }

--
-- assertions
--

A.ok = function(a)
  return not not a
end

local function equal(a, b)
  if a == b then
    return true
  elseif type(a) == 'table' and type(b) == 'table' then
    -- compare array part
    for k, v in ipairs(a) do
      if not equal(v, b[k]) then return false end
    end
    for k, v in ipairs(b) do
      if not equal(v, a[k]) then return false end
    end
    -- compare hash part
    for k, v in pairs(a) do
      if not equal(v, b[k]) then return false end
    end
    for k, v in pairs(b) do
      if not equal(v, a[k]) then return false end
    end
    return true
  else
    return false
  end
end
A.equal = equal

A.is_nil = function(a)
  return equal(a, nil)
end

A.is_number = function(a)
  return equal(type(a), 'number')
end

A.is_boolean = function(a)
  return equal(type(a), 'boolean')
end

A.is_string = function(a)
  return equal(type(a), 'string')
end

A.is_table = function(a)
  return equal(type(a), 'table')
end

A.is_array = function(a)
  if not A.is_table(a) then return false end
  local i = 1
  for k, v in pairs(a) do
    if k ~= i then return false end
    i = i + 1
  end
  return true
end

A.is_hash = function(a)
  if not A.is_table(a) then return false end
  for k, v in ipairs(a) do
    return false
  end
  return true
end

local function is_callable(a)
  -- N.B: anything supporting __call
  -- N.B: __call should itself be callable :)
  return type(a) == 'function' or (a ~= nil and is_callable((Debug.getmetatable(a) or {}).__call))
end
A.is_callable = is_callable

A.throws = function(...)
  local status, err = pcall(...)
  return equal(status, false) and A.ok(err), err
end

--
-- define not_* assertions
--

for k, v in pairs(A) do
  A['not_' .. k] = function (...)
    return not v(...)
  end
end

--
-- self tests
--

assert(A.ok(1))
assert(A.not_ok(false))
assert(A.is_nil(nil))
assert(A.throws(foo))
assert(not A.ok(A.is_nil(1)))



--
-- runner
--

local function run(tests, callback)

  -- sanity
  if not tests then tests = { } end

  local exit_code = 0
  -- count tests
  local ntests = 0
  for name, test in pairs(tests) do
    ntests = ntests + 1
  end
  if callback and ntests == 0 then
    callback(exit_code)
    return
  end
  -- iterate over tests
  for name, test in pairs(tests) do
    -- compose testing context
    local tried = 0
    local errors = { }
    local started_at = UV.now()
    local ctx = {
      -- raw assertions, returning booleans
      h = A,
      -- must be called at the end of test
      done = function ()
        local elapsed_time = UV.now() - started_at
        -- print test summary
        local color = 'green'
        if #errors > 0 then
          color = 'red'
          exit_code = 1
        end
        local str = ('%s: %d/%d within %.3f seconds'):format(name, tried, tried + #errors, 0.001 * elapsed_time)
        print(true and Utils.colorize(color, str) or str)
        for i, err in ipairs(errors) do
          print(err)
        end
        -- report status
        ntests = ntests - 1
        if callback and ntests == 0 then
          callback(exit_code)
        end
      end,
    }
    -- delegate assertions
    for k, v in pairs(A) do
      ctx[k] = function (...)
        if v(...) then
          tried = tried + 1
        else
          p(...)
          local info = Debug.getinfo(2)
          Table.insert(errors, ('%s:%s: assertion "%s" failed'):format(info.short_src, info.currentline, k))
        end
      end
    end
    -- run test
    local status, error = pcall(test, ctx)
    if not status then
      Table.insert(errors, error)
      ctx.done()
    end
  end

end

--
-- given name of test files, run their exports as test suite
--

local exit_code = 0
local function run_suite(files, callback)
  local file = Table.remove(files)
  if file == nil then
    callback(exit_code)
  end
  file = Path.resolve(process.cwd(), file)
  local status, tests = pcall(require, file)
  --p('S?', file, status, tests)
  if status then
    run(tests, function (err)
      --p('S!', err)
      if err ~= 0 then exit_code = err end
      run_suite(files, callback)
    end)
  else
    debug(tests)
    run_suite(files, callback)
  end
end

--
-- command line arguments should be require()able modules exporting tables of functions
--

local files = { } ; for _, file in ipairs(process.argv) do Table.insert(files, file) end
run_suite(files, function (status)
  process.exit(status)
end)
